// Generated by CoffeeScript 1.12.2
var Texteditor;

window.Vidze || (window.Vidze = {});

window.Vidze.Texteditor = Texteditor = (function() {
  function Texteditor() {
    var $buttons, $textboxes;
    this.container = $("<div>", {
      "class": "texteditor-container"
    });
    $buttons = this._createButtons();
    $textboxes = this._createTextboxes();
    this.container.prepend($buttons);
    this.container.append($textboxes);
    autosize(this.textboxarea);
    $buttons.on('click', '.texteditbutton', (function(_this) {
      return function(event) {
        var $target, buttonaction, menu;
        $target = $(event.target);
        if (!$target.parent().is("a")) {
          event.preventDefault();
          buttonaction = $target.attr('id');
          menu = $target.hasClass("menu");
          return _this._action(buttonaction, menu);
        }
      };
    })(this));
    this.textboxarea.on('input', (function(_this) {
      return function() {
        return _this._generateFormatting();
      };
    })(this));
  }

  Texteditor.prototype.object = function() {
    return this.container;
  };

  Texteditor.prototype._createButtons = function() {
    var $buttonlist, texteditorbuttons;
    texteditorbuttons = {
      "Bold": ["bold", "fa-bold"],
      "Italic": ["italic", "fa-italic"],
      "Strikethrough": ["strikethrough", "fa-strikethrough"],
      "Heading": ["heading", "fa-header", true],
      "Blockquote": ["blockquote", "fa-quote-left"],
      "Divider": ["hr", "fa-minus"],
      "Code": ["code", "fa-code"],
      "List": ["list", "fa-list"],
      "Ordered list": ["ol-list", "fa-list-ol"],
      "Table": ["table", "fa-table"],
      "Link": ["link", "fa-link"],
      "Image (embed link)": ["image", "fa-image"],
      "YouTube (embed link)": ["youtube", "fa-youtube-play"],
      "Guide": [false, "fa-question", false, "https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"]
    };
    $buttonlist = $("<div>", {
      id: "texteditbuttons"
    });
    this.menulist = [];
    $.each(texteditorbuttons, (function(_this) {
      return function(name, value) {
        var $button, $icon, action, createmenu, icon, link;
        action = value[0];
        icon = value[1];
        createmenu = value[2];
        link = value[3];
        $icon = $("<i>", {
          "class": "fa " + icon
        }).css({
          "pointer-events": "none"
        });
        if (link) {
          $button = $("<div>", {
            "class": "texteditbutton"
          }).wrap("<a href='" + link + "' title='" + name + "' target='_blank'></a>").append($icon).parent();
        } else {
          $button = $("<div>", {
            "class": "texteditbutton",
            title: name,
            role: "button"
          }).append($icon);
        }
        if (action) {
          $button.attr('id', action);
        }
        if (createmenu) {
          _this._createMenu(action);
          $button.addClass("menu");
        }
        $buttonlist.append($button);
        if (createmenu) {
          $buttonlist.append(_this.menu);
          return _this.menulist.push(_this.menu);
        }
      };
    })(this));
    return $buttonlist;
  };

  Texteditor.prototype._createMenu = function(action) {
    var menus;
    menus = {
      "heading": {
        "Heading 1": ["tag", "h1"],
        "Heading 2": ["tag", "h2"],
        "Heading 3": ["tag", "h3"],
        "Heading 4": ["tag", "h4"],
        "Heading 5": ["tag", "h5"],
        "Heading 6": ["tag", "h6"]
      }
    };
    return $.each(menus, (function(_this) {
      return function(name, value) {
        var $menu;
        if (action === name) {
          $menu = $("<ul>", {
            "class": "texteditormenu " + name
          }).data("type", name);
          $.each(menus[name], function(namein, valuein) {
            var $heading, $item, $listitem, type, typeval;
            type = valuein[0];
            typeval = valuein[1];
            if (type === "tag") {
              $listitem = $("<li>");
              $item = $("<a>", {
                href: "#",
                type: typeval
              });
              $heading = $("<" + typeval + ">").css({
                "pointer-events": "none"
              }).text(namein);
              $item.append($heading);
              $listitem.append($item);
              return $menu.append($listitem);
            }
          });
          $(document).click(function(event) {
            var $target, menuShowing, type;
            $target = $(event.target);
            type = $menu.data('type');
            menuShowing = $menu.data("menuShowing");
            if ($target.is($menu.find("a"))) {
              return;
            }
            if ($target.is($(".texteditbutton#" + type))) {
              return;
            }
            if (menuShowing) {
              return _this._toggleMenu(type);
            }
          });
          $menu.on('click', 'a', function(event) {
            var $target, menuShowing, tag, type;
            event.preventDefault();
            $target = $(event.target);
            menuShowing = $menu.data("menuShowing");
            type = $menu.data('type');
            tag = $target.attr('type');
            _this._action(tag, false);
            if (menuShowing) {
              return _this._toggleMenu(type);
            }
          });
          return _this.menu = $menu;
        }
      };
    })(this));
  };

  Texteditor.prototype._createTextboxes = function() {
    this.textboxcontainer = $("<div>", {
      id: "replybox-container"
    });
    this.textboxarea = $("<textarea>", {
      name: "content",
      "class": "replybox"
    });
    this.textboxpreview = $("<div>", {
      "class": "replybox-preview"
    });
    this.textboxcontainer.append(this.textboxarea);
    this.textboxcontainer.append(this.textboxpreview);
    return this.textboxcontainer;
  };

  Texteditor.prototype._toggleMenu = function(type) {
    var $menuButtonElement, $menuElement, busy, menuButtonOuterHeight, menuButtonPosition, menuShowing;
    $menuElement = $(".texteditormenu." + type);
    menuShowing = $menuElement.data("menuShowing");
    busy = $menuElement.data("busy");
    $menuButtonElement = $(".texteditbutton#" + type);
    menuButtonPosition = $menuButtonElement.position();
    menuButtonOuterHeight = $menuButtonElement.outerHeight();
    if (!busy) {
      $menuElement.data("busy", 1);
      if (!menuShowing) {
        $menuElement.css({
          "top": menuButtonPosition.top + menuButtonOuterHeight,
          "left": menuButtonPosition.left
        });
        $menuElement.show();
        $menuElement.velocity({
          opacity: 1
        }, 100, "linear", function() {
          return $menuElement.data("busy", 0);
        });
        return $menuElement.data("menuShowing", 1);
      } else {
        return $menuElement.velocity({
          opacity: 0
        }, 100, "linear", function() {
          $menuElement.hide();
          $menuElement.data("menuShowing", 0);
          return $menuElement.data("busy", 0);
        });
      }
    }
  };

  Texteditor.prototype._action = function(buttonaction, menu) {
    console.log(menu);
    if (menu) {
      return this._toggleMenu(buttonaction);
    } else {
      return this._update(buttonaction);
    }
  };

  Texteditor.prototype._getCurrentLine = function() {
    var $textboxval, end, pos, start;
    pos = this.textboxarea.textrange('get', 'start');
    $textboxval = this.textboxarea.val();
    start = $textboxval.lastIndexOf('\n', pos - 1) + 1;
    end = $textboxval.indexOf('\n', pos);
    if (end === -1) {
      end = $textboxval.length;
    }
    return $textboxval.substr(start, end - start);
  };

  Texteditor.prototype._update = function(format) {
    var currentLineText, cursorPosition, determineNewLine, determineNewSpace, selEndPos, selLength, selStartPos, selection;
    selection = this.textboxarea.textrange('get', 'text');
    selLength = this.textboxarea.textrange('get', 'length');
    selStartPos = this.textboxarea.textrange('get', 'start');
    selEndPos = this.textboxarea.textrange('get', 'end');
    cursorPosition = this.textboxarea.textrange('get', 'position');
    currentLineText = this._getCurrentLine(this.textboxarea);
    determineNewLine = "";
    determineNewSpace = "";
    if (currentLineText) {
      determineNewLine = "\n";
      determineNewSpace = " ";
    }
    if (!selection) {
      if (format === "bold") {
        document.execCommand("insertText", false, "**Bold**");
        this.textboxarea.textrange('set', -6, -2);
      }
      if (format === "italic") {
        document.execCommand("insertText", false, "*Italic*");
        this.textboxarea.textrange('set', -7, -1);
      }
      if (format === "strikethrough") {
        document.execCommand("insertText", false, "~~Strikethrough~~");
        this.textboxarea.textrange('set', -15, -2);
      }
      if (format === "h1") {
        document.execCommand("insertText", false, determineNewLine + '# Heading');
        this.textboxarea.textrange('set', -7);
      }
      if (format === "h2") {
        document.execCommand("insertText", false, determineNewLine + '## Heading');
        this.textboxarea.textrange('set', -7);
      }
      if (format === "h3") {
        document.execCommand("insertText", false, determineNewLine + '### Heading');
        this.textboxarea.textrange('set', -7);
      }
      if (format === "h4") {
        document.execCommand("insertText", false, determineNewLine + '#### Heading');
        this.textboxarea.textrange('set', -7);
      }
      if (format === "h5") {
        document.execCommand("insertText", false, determineNewLine + '##### Heading');
        this.textboxarea.textrange('set', -7);
      }
      if (format === "h6") {
        document.execCommand("insertText", false, determineNewLine + '###### Heading');
        this.textboxarea.textrange('set', -7);
      }
      if (format === "blockquote") {
        document.execCommand("insertText", false, determineNewLine + '> Blockquote');
        this.textboxarea.textrange('set', -10);
      }
      if (format === "code") {
        document.execCommand("insertText", false, determineNewLine + '```language\nCode\n```');
        this.textboxarea.textrange('set', -8, -4);
      }
      if (format === "hr") {
        document.execCommand("insertText", false, '\n***\n');
        this.textboxarea.textrange('setcursor', cursorPosition + 5);
      }
      if (format === "list") {
        document.execCommand("insertText", false, determineNewLine + '- List');
        this.textboxarea.textrange('set', -4);
      }
      if (format === "ol-list") {
        document.execCommand("insertText", false, determineNewLine + '1. Ordered list');
        this.textboxarea.textrange('set', -12);
      }
      if (format === "table") {
        document.execCommand("insertText", false, determineNewLine + 'Table  | Column 2 | Centered | Right align\n-------|----------|:--------:| -----------:\nA      | D        | G        | J\nB      | E        | H        | K\nC      | F        | I        | L');
      }
      if (format === "link") {
        document.execCommand("insertText", false, determineNewSpace + '[text](http://link.com)');
        this.textboxarea.textrange('set', -22, -18);
      }
      if (format === "image") {
        document.execCommand("insertText", false, determineNewSpace + '![alt text](http://vidze.co.uk/images/avatars/default.jpg)');
        this.textboxarea.textrange('set', -46, -1);
      }
      if (format === "youtube") {
        document.execCommand("insertText", false, determineNewSpace + '![:youtube](jNQXAC9IVRw)');
        this.textboxarea.textrange('set', -12, -1);
      }
    } else {
      if (format === "bold") {
        this.textboxarea.textrange('insert', '**' + selection + '**');
        this.textboxarea.textrange('set', (-selLength) - 2, -2);
      }
      if (format === "italic") {
        this.textboxarea.textrange('insert', '*' + selection + '*');
        this.textboxarea.textrange('set', (-selLength) - 1, -1);
      }
      if (format === "strikethrough") {
        this.textboxarea.textrange('insert', '~~' + selection + '~~');
        this.textboxarea.textrange('set', (-selLength) - 4, -4);
      }
      if (format === "heading" || format === "h1") {
        if (currentLineText === "Heading") {
          this.textboxarea.textrange('setcursor', -1);
        } else {
          this.textboxarea.textrange('insert', '# ' + selection);
          this.textboxarea.textrange('set', -selLength);
        }
      }
    }
    return this._generateFormatting();
  };

  Texteditor.prototype._generateFormatting = function() {
    var codeblocks, currentval, lastval, markdownpreview, youtuberegex, youtubereplace;
    currentval = this.textboxarea.val();
    lastval = this.textboxarea.data("lastval");
    if (lastval !== currentval) {
      this.textboxarea.data("lastval", currentval);
      youtuberegex = /(\!\[:youtube\]\(([^\)]+)\))/gm;
      youtubereplace = '<iframe width="600" height="400" style="max-width: 100%;" src="http://www.youtube.com/embed/$1?rel=0&wmode=transparent" frameborder="0" allowfullscreen></iframe>';
      markdownpreview = marked(currentval.replace(youtuberegex, youtubereplace));
      this.textboxpreview.html(markdownpreview);
      codeblocks = this.textboxpreview.find("pre code");
      if (codeblocks.length !== 0) {
        return codeblocks.each(function() {
          return hljs.highlightBlock(this);
        });
      }
    }
  };

  return Texteditor;

})();
